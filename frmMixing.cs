using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.IO.Ports;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.Grid;
using ScaleApp.Common;

namespace ScaleApp
{
    public partial class frmMixing : Form
    {
        public static string labelType = "";
        private SerialPort _serialPort;         //<-- declares a SerialPort Variable to be used throughout the form
        private const int BaudRate = 9600;      //<-- BaudRate Constant. 9600 seems to be the scale-units default value

        public frmMixing()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource asynchronously
            sqlDataSource1.FillAsync();
        }

        private void frmMixing_Load(object sender, EventArgs e)
        {               
            txtTotal.Text = "0";
            Start_Timer();
            GetComPort();
            loadComboBoxOperator();
            loadComboBoxStep();
            LoadLookUpProduct();            
            LoadLookUpColor();
            LoadLookUpMaterial();
            LoadLookUpRecycled();
            LoadGridControl1();
            spbPost.Enabled = false;            
        }

        private void GetComPort()
        {
            string[] portNames = SerialPort.GetPortNames();     //<-- Reads all available comPorts
            foreach (var portName in portNames)
            {
                cboComPort.Items.Add(portName);                  //<-- Adds Ports to combobox
            }
            cboComPort.SelectedIndex = 0;                        //<-- Selects first entry (convenience purposes)

            //<-- This block ensures that no exceptions happen
            if (_serialPort != null && _serialPort.IsOpen)
                _serialPort.Close();
            if (_serialPort != null)
                _serialPort.Dispose();
            //<-- End of Block
        }

        private void CloseSerialPort()
        {
            if (_serialPort != null && _serialPort.IsOpen)
                _serialPort.Close();
            if (_serialPort != null)
                _serialPort.Dispose();
        }

        private delegate void Closure();

        private void SerialPortOnDataReceived(object sender, SerialDataReceivedEventArgs serialDataReceivedEventArgs)
        {
            if (InvokeRequired)     //<-- Makes sure the function is invoked to work properly in the UI-Thread
                BeginInvoke(new Closure(() => { SerialPortOnDataReceived(sender, serialDataReceivedEventArgs); }));     //<-- Function invokes itself
            else
            {
                int dataLength = _serialPort.BytesToRead;

                byte[] data = new byte[dataLength];
                int nbrDataRead = _serialPort.Read(data, 0, dataLength);
                if (nbrDataRead == 0)
                {
                    return;
                }
                string str = Encoding.UTF8.GetString(data);

                //Buffers values in a file
                File.AppendAllText("buffer1", str);

                //Read from buffer and write into "strnew" String
                string strnew = File.ReadLines("buffer1").Last();

                //Shows actual true value coming from scale
                txtScaleWeight.Text = strnew;
                Regex digits = new Regex(@"^\D*?((-?(\d+(\.\d+)?))|(-?\.\d+)).*");
                Match mx = digits.Match(txtScaleWeight.Text);
                decimal strValue = mx.Success ? Convert.ToDecimal(mx.Groups[1].Value) : 0;
                txtScaleWeight.Text = strValue.ToString();                
            }
        }        

        private void ActionScale()
        {
            _serialPort = new SerialPort(cboComPort.Text, BaudRate, Parity.None, 8, StopBits.One);       //<-- Creates new SerialPort using the name selected in the combobox
            _serialPort.DataReceived += SerialPortOnDataReceived;       //<-- this event happens everytime when new data is received by the ComPort
            _serialPort.Open();     //<-- make the comport listen
            txtScaleWeight.Text = "Scaling... " + _serialPort.PortName + "...\r\n";
        }

        private void cmbProduct_SelectedIndexChanged(object sender, EventArgs e)
        {

            if (cmbProduct.SelectedItem.IsNull())
            {
                return;
            }
            else
            {
                loadColorsByProduct(cmbProduct.SelectedValue.ToString());
            }            
        }        

        private void CreateMixRaw()
        {
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);
            SqlCommand cmd = new SqlCommand("sp_createMixRaw", conn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@shiftID", cmbShift.SelectedItem);
            cmd.Parameters.AddWithValue("@operatorCode", cmbOperator.SelectedValue);
            cmd.Parameters.AddWithValue("@stepId", cmbStep.SelectedValue);
            cmd.Parameters.AddWithValue("@machineID", txtMachine.Text);
            cmd.Parameters.AddWithValue("@productCode", lueProduct.EditValue);
            cmd.Parameters.AddWithValue("@colorCode", tedColorCode.Text);            
            cmd.Parameters.AddWithValue("@weightRecycle", bteWeightRe.Text);
            cmd.Parameters.AddWithValue("@weightMaterial", bteWeightRM.Text);
            cmd.Parameters.AddWithValue("@totalMaterial", txtTotal.Text);
            cmd.Parameters.AddWithValue("@reRatio", txtReRatio.EditValue);
            cmd.Parameters.AddWithValue("@crushRawId", (lueRecycled.EditValue.IsNullOrEmpty()) ? DBNull.Value : lueRecycled.EditValue);
            cmd.Parameters.AddWithValue("@reason", txtReason.Text);
            cmd.Parameters.AddWithValue("@qrCode", qrMixLotID.Text);

            conn.Open();

            int i = cmd.ExecuteNonQuery();

            ScaleApp.Common.DataOperation.disconnect();

            LoadGridControl1();

            if (i != 0)
            {
                MessageBox.Show(i + "Data Saved");
            }
        }

        private void UpdateMixRaw()
        {
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);
            SqlCommand cmd = new SqlCommand("sp_editMixRaw", conn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@shiftID", cmbShift.SelectedItem);
            cmd.Parameters.AddWithValue("@operatorCode", cmbOperator.SelectedValue);
            cmd.Parameters.AddWithValue("@stepId", cmbStep.SelectedValue);
            cmd.Parameters.AddWithValue("@machineID", txtMachine.Text);
            cmd.Parameters.AddWithValue("@productCode", lueProduct.EditValue);            
            cmd.Parameters.AddWithValue("@weightRecycle", bteWeightRe.Text);
            cmd.Parameters.AddWithValue("@weightMaterial", bteWeightRM.Text);
            cmd.Parameters.AddWithValue("@totalMaterial", txtTotal.Text);
            cmd.Parameters.AddWithValue("@reRation", txtReRatio.EditValue);
            cmd.Parameters.AddWithValue("@crushRawId", (lueRecycled.EditValue.IsNullOrEmpty()) ? DBNull.Value : lueRecycled.EditValue);
            cmd.Parameters.AddWithValue("@reason", txtReason.Text);
            cmd.Parameters.AddWithValue("@qrCode", qrMixLotID.Text);            
            cmd.Parameters.AddWithValue("@mixRawId", txtMixID.Text);

            conn.Open();

            int i = cmd.ExecuteNonQuery();

            ScaleApp.Common.DataOperation.disconnect();            

            if (i != 0)
            {
                MessageBox.Show(i + "Data Saved");
                LoadGridControl1();
            }
        }               

        private int CheckValidForm()
        {            
            if (lueProduct.EditValue == null || txtWeightMaterial.Text == null)
            {
                return 0;
            }
            return 1;
        }                   

        private void loadComboBoxOperator()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getOperators", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }
                DataRow blankRow = ds.Tables[0].NewRow();
                blankRow["OperatorCode"] = "None";
                blankRow["OperatorName"] = "";
                ds.Tables[0].Rows.InsertAt(blankRow, 0);

                cmbOperator.DataSource = ds.Tables[0];
                cmbOperator.DisplayMember = "OperatorName";
                cmbOperator.ValueMember = "OperatorCode";
            } catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void loadComboBoxStep()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getSteps", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }
                DataRow blankRow = ds.Tables[0].NewRow();
                blankRow["StepCode"] = "None";
                blankRow["StepName"] = "";
                ds.Tables[0].Rows.InsertAt(blankRow, 0);

                cmbStep.DataSource = ds.Tables[0];
                cmbStep.DisplayMember = "StepName";
                cmbStep.ValueMember = "StepCode";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void loadComboBoxProduct()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getProducts", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }
                DataRow blankRow = ds.Tables[0].NewRow();
                //blankRow["ProductCode"] = "None";
                //blankRow["ProductName"] = "";
                //ds.Tables[0].Rows.InsertAt(blankRow, 0);

                cmbProduct.DataSource = ds.Tables[0];
                cmbProduct.DisplayMember = "ProductName";
                cmbProduct.ValueMember = "ProductCode";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void loadComboBoxColor()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getColors", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }

                cmbColor.DataSource = ds.Tables[0];
                cmbColor.DisplayMember = "ColorName";
                cmbColor.ValueMember = "ColorCode";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void loadComboBoxMaterial()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getMaterials", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }
                DataRow blankRow = ds.Tables[0].NewRow();
                blankRow["MaterialCode"] = "None";
                blankRow["MaterialName"] = "";
                ds.Tables[0].Rows.InsertAt(blankRow, 0);

                cmbMaterial.DataSource = ds.Tables[0];
                cmbMaterial.DisplayMember = "MaterialName";
                cmbMaterial.ValueMember = "MaterialCode";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void LoadLookUpMaterial()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getMaterials", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }                

                lueMaterial.Properties.DataSource = ds.Tables[0];
                lueMaterial.Properties.DisplayMember = "MaterialName";
                lueMaterial.Properties.ValueMember = "MaterialCode";

                lueMaterial.Properties.Columns.Add(new LookUpColumnInfo("MaterialCode", "MaterialCode", 60));
                lueMaterial.Properties.Columns.Add(new LookUpColumnInfo("MaterialName", "MaterialName", 120));
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void LoadLookUpProduct()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getProducts", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }                

                lueProduct.Properties.DataSource = ds.Tables[0];
                lueProduct.Properties.DisplayMember = "ProductName";
                lueProduct.Properties.ValueMember = "ProductCode";
                lueProduct.Properties.KeyMember = "ProductCode";

                lueProduct.Properties.Columns.Add(new LookUpColumnInfo("ProductCode", "ProductCode", 120));
                lueProduct.Properties.Columns.Add(new LookUpColumnInfo("ProductName", "ProductName", 120));
                //enable text editing 
                lueProduct.Properties.TextEditStyle = TextEditStyles.Standard;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }        

        private void LoadLookUpColor()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getColorsProducts", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }
                
                lueColor.Properties.DataSource = ds.Tables[0];
                lueColor.Properties.DisplayMember = "ColorName";
                lueColor.Properties.ValueMember = "ColorCode";                

                lueColor.Properties.Columns.Add(new LookUpColumnInfo("ColorCode", "ColorCode", 60));
                lueColor.Properties.Columns.Add(new LookUpColumnInfo("ColorName", "ColorName", 120));

                //enable text editing 
                lueColor.Properties.TextEditStyle = TextEditStyles.DisableTextEditor;
                lueColor.CascadingOwner = lueProduct;
                lueColor.Properties.CascadingMember = "ProductCode";                

                lueColor.EditValue = ds.Tables[0].Rows[0][2];
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }        

        private void LoadLookUpRecycled()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getCrushRaws", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }

                lueRecycled.Properties.DataSource = ds.Tables[0];
                lueRecycled.Properties.DisplayMember = "RecycledID";
                lueRecycled.Properties.ValueMember = "CrushRawId";
                
                lueRecycled.Properties.Columns.Add(new LookUpColumnInfo("CrushRawId", "CrushRawId", 60));
                lueRecycled.Properties.Columns.Add(new LookUpColumnInfo("RecycledID", "RecycledID", 120));
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void loadColorsByProduct(string productId)
        {
            if (lueProduct.EditValue.IsNullOrEmpty())
            {
                return;
            }
            else
            {
                DataSet ds = new DataSet();
                String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
                SqlConnection conn = new SqlConnection(connStr);
                SqlDataAdapter SqlDa = new SqlDataAdapter();
                SqlCommand sqlcmd = new SqlCommand("sp_getColorsProduct", conn);
                try
                {
                    sqlcmd.CommandType = CommandType.StoredProcedure;
                    sqlcmd.Parameters.AddWithValue("@ProductId", productId);
                    SqlDa.SelectCommand = sqlcmd;

                    SqlDa.Fill(ds);                    
                    
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        tedColorCode.Text = ds.Tables[0].Rows[0][1].ToString();
                        tedColor.Text = ds.Tables[0].Rows[0][2].ToString();
                    }
                    else
                    {
                        tedColorCode.Text = "";
                        tedColor.Text = "";
                    }                    
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
                ScaleApp.Common.DataOperation.disconnect();
            }
        }

        private string GetTotalWeight()
        {
            Double weightRM = 0;
            Double weightRe = 0;
            Double weightTotal = 0;
                
            if (String.IsNullOrEmpty(bteWeightRM.Text))
            {
                weightRM = 0;
            }
            else
            {
                weightRM = double.Parse(bteWeightRM.Text);
            }

            if (String.IsNullOrEmpty(bteWeightRe.Text))
            {
                weightRe = 0;
            }
            else
            {
                weightRe = double.Parse(bteWeightRe.Text);
            }            
            weightTotal = weightRM + weightRe;
            return weightTotal.ToString();
        }

        private void txtWeightRM_TextChanged(object sender, EventArgs e)
        {            
            txtTotal.Text = GetTotalWeight();
        }

        private void txtWeightRecycled_TextChanged(object sender, EventArgs e)
        {            
            txtTotal.Text = GetTotalWeight();
        }

        private void generateTextQRCode()
        {
            String qrCodeText = "";
            String qrCodeMfunction = ScaleApp.Common.mFunction.GenerateTextQRCode("MI", DateTime.Today);            

            qrCodeText = qrCodeMfunction + "|" + lueProduct.EditValue.ToString() + "|" + getLastMixRawId().ToString();
            qrMixLotID.Text = qrCodeText;
        }

        private int getLastMixRawId()
        {
            int lastCrushRawId;

            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);
            SqlCommand sqlcmd = new SqlCommand("sp_getLastMixIdentity", conn);

            sqlcmd.CommandType = CommandType.StoredProcedure;

            SqlParameter returnParameter = new SqlParameter("@LastIdentity", SqlDbType.Int);
            returnParameter.Direction = ParameterDirection.ReturnValue;
            sqlcmd.Parameters.Add(returnParameter);
            conn.Open();
            sqlcmd.ExecuteNonQuery();

            lastCrushRawId = (int)sqlcmd.Parameters["@LastIdentity"].Value + 1;
            return lastCrushRawId;

            ScaleApp.Common.DataOperation.disconnect();

        }

        private string GetProductMaterial_S(string productId)
        {
            string materialCode = "";
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);
            SqlDataAdapter SqlDa = new SqlDataAdapter();
            SqlCommand sqlcmd = new SqlCommand("sp_getMaterialsProduct_s", conn);
            try
            {
                sqlcmd.CommandType = CommandType.StoredProcedure;
                sqlcmd.Parameters.AddWithValue("@ProductId", productId);
                SqlDa.SelectCommand = sqlcmd;

                SqlDa.Fill(ds);

                if (ds.Tables[0].Rows.Count > 0)
                {
                    materialCode = ds.Tables[0].Rows[0][8].ToString();                    
                }
                else
                {
                    materialCode = "";                    
                }                
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            return materialCode;
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void loadGridView1()
        {   
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getFullMixRaws", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }

                //Select only one row
                gridView1.MultiSelect = false;
                gridView1.AutoGenerateColumns = false;
                
                gridView1.DataSource = ds.Tables[0];
                //Change name of Columns
                gridView1.Columns["MixId"].DataPropertyName = "MixRawId";
                gridView1.Columns["MixDate"].DataPropertyName = "CreateTime";
                gridView1.Columns["MixLotID"].DataPropertyName = "MixBaCode";
                gridView1.Columns["ReLotID"].DataPropertyName = "CrushRawId";
                gridView1.Columns["Shift"].DataPropertyName = "ShiftName";
                gridView1.Columns["Operator"].DataPropertyName = "OperatorName";
                gridView1.Columns["Item"].DataPropertyName = "ProductName";
                gridView1.Columns["Material"].DataPropertyName = "MaterialName";
                gridView1.Columns["Color"].DataPropertyName = "ColorName";
                gridView1.Columns["Step"].DataPropertyName = "StepCode";
                gridView1.Columns["WRaw"].DataPropertyName = "WeightMaterial";
                gridView1.Columns["WRe"].DataPropertyName = "WeightRecycle";
                gridView1.Columns["Total"].DataPropertyName = "TotalMaterial";
                gridView1.Columns["Machine"].DataPropertyName = "MachineName";
                gridView1.Columns["Posted"].DataPropertyName = "Posted";

                gridView1.Columns["MixId"].Width = 40;
                gridView1.Columns["MixDate"].Width = 100;
                gridView1.Columns["MixLotID"].Width = 120;
                gridView1.Columns["ReLotID"].Width = 120;
                gridView1.Columns["Shift"].Width = 40;
                gridView1.Columns["Operator"].Width = 80;
                gridView1.Columns["Item"].Width = 120;
                gridView1.Columns["Material"].Width = 120;
                gridView1.Columns["Color"].Width = 120;
                gridView1.Columns["Step"].Width = 60;
                gridView1.Columns["WRaw"].Width = 80;
                gridView1.Columns["WRe"].Width = 80;
                gridView1.Columns["Total"].Width = 80;
                gridView1.Columns["Machine"].Width = 80;
                gridView1.Columns["Posted"].Width = 40;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void LoadGridControl1()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                //Binding data for 2 gridView and attach to gridControl
                SqlDataAdapter SqlDaMixRaw = new SqlDataAdapter("sp_getFullMixRaws", conn);
                SqlDataAdapter SqlDaCrush = new SqlDataAdapter("sp_getFullCrushRaws", conn);
                SqlDaMixRaw.SelectCommand.CommandType = CommandType.StoredProcedure;
                SqlDaCrush.SelectCommand.CommandType = CommandType.StoredProcedure;
                SqlDaMixRaw.Fill(ds, "MixRaw");
                SqlDaCrush.Fill(ds, "CrushRaw");

                //Set up a master-detail relationship between the DataTables 
                DataColumn keyColumn = ds.Tables["MixRaw"].Columns["MixRawId"];
                DataColumn foreignKeyColumn = ds.Tables["CrushRaw"].Columns["MixRawId"];
                ds.Relations.Add("MixCrush", keyColumn, foreignKeyColumn);

                //Binding Master table to gridControl
                gridControl1.DataSource = ds.Tables["MixRaw"];
                gridControl1.ForceInitialize();

                //Set the columns of master GridView's columns to AutoResize 
                gridView2.OptionsView.ColumnAutoWidth = false;

                //Hide unsual columns of master GridView
                gridView2.Columns["OperatorCode"].VisibleIndex = -1;                
                gridView2.Columns["StepName"].VisibleIndex = -1;
                //gridView2.Columns["ColorCode"].VisibleIndex = -1;
                gridView2.Columns["ColorName"].VisibleIndex = -1;
                gridView2.Columns["StepCode"].VisibleIndex = -1;
                gridView2.Columns["CrushRawID"].VisibleIndex = -1;
                gridView2.Columns["Reason"].VisibleIndex = -1;
                gridView2.Columns["RecycledID"].VisibleIndex = -1;

                //Reorder Columns of MasterGridView
                gridView2.Columns["CreateTime"].VisibleIndex = 1;                
                gridView2.Columns["ShiftName"].VisibleIndex = 2;
                gridView2.Columns["OperatorName"].VisibleIndex = 3;
                gridView2.Columns["MixBacode"].VisibleIndex = 4;                
                gridView2.Columns["ProductName"].VisibleIndex = 5;
                gridView2.Columns["ProductCode"].VisibleIndex = 6;
                gridView2.Columns["ColorCode"].VisibleIndex = 7;
                gridView2.Columns["WeightMaterial"].VisibleIndex = 8;
                gridView2.Columns["WeightRecycle"].VisibleIndex = 9;
                gridView2.Columns["TotalMaterial"].VisibleIndex = 10;
                gridView2.Columns["ReRatio"].VisibleIndex = 11;
                gridView2.Columns["MachineName"].VisibleIndex = 12;
                gridView2.Columns["Posted"].VisibleIndex = 13;

                //Set column's width of Master GridView
                gridView2.Columns["MixRawId"].Width = 40;                
                gridView2.Columns["CreateTime"].Width = 60;
                gridView2.Columns["MixBacode"].Width = 220;                
                gridView2.Columns["ShiftName"].Width = 40;
                gridView2.Columns["OperatorName"].Width = 100;
                gridView2.Columns["ProductName"].Width = 180;
                gridView2.Columns["ProductCode"].Width = 180;                
                gridView2.Columns["WeightMaterial"].Width = 80;
                gridView2.Columns["WeightRecycle"].Width = 80;
                gridView2.Columns["TotalMaterial"].Width = 80;
                gridView2.Columns["ReRatio"].Width = 80;
                gridView2.Columns["MachineName"].Width = 80;
                gridView2.Columns["Posted"].Width = 40;

                //Display format for column
                gridView2.Columns["ReRatio"].DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
                gridView2.Columns["ReRatio"].DisplayFormat.FormatString = "{0:p2}";

                //Bind data to GridView2 and attachment to the GridView1 as a Detail
                GridView gridView3 = new GridView(gridControl1);
                gridControl1.LevelTree.Nodes.Add("MixCrush", gridView3);

                //Set caption for detail GridView
                gridView3.ViewCaption = "Recycled Lots";

                //Generate all columns of datatable resource of detail GridView
                gridView3.PopulateColumns(ds.Tables["CrushRaw"]);

                //Hide unsual columns of detail GridView
                gridView3.Columns["OperatorCode"].VisibleIndex = -1;
                gridView3.Columns["ProductCode"].VisibleIndex = -1;
                gridView3.Columns["StepName"].VisibleIndex = -1;
                gridView3.Columns["MixRawId"].VisibleIndex = -1;
                gridView3.Columns["CreateBy"].VisibleIndex = -1;

                //Set column's width of detail GridView
                gridView3.Columns["CrushRawId"].Width = 40;
                gridView3.Columns["OperatorName"].Width = 100;
                gridView3.Columns["ColorCode"].Width = 80;
                gridView3.Columns["WeightRecycle"].Width = 80;
                gridView3.Columns["LossTypeName"].Width = 60;
                gridView3.Columns["MixBacode"].Width = 150;
                gridView3.Columns["MachineName"].Width = 80;
                gridView3.Columns["RecycledID"].Width = 150;
                gridView3.Columns["Posted"].Width = 40;

                //Set editable of two GridViews to not allows
                gridView2.OptionsBehavior.Editable = false;
                gridView2.MasterRowExpanded += gridView2_MasterRowExpanded;
                gridView3.OptionsBehavior.Editable = false;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void LoadGridControl2(string productId, string weightRM)
        {
            if (lueProduct.EditValue.IsNullOrEmpty())
            {
                return;
            }
            else
            {
                if (gridViewMaterialBom.Columns.ColumnByFieldName("Total") != null)
                {
                    gridViewMaterialBom.Columns.Clear();
                }

                DataSet ds = new DataSet();
                String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
                SqlConnection conn = new SqlConnection(connStr);
                SqlDataAdapter SqlDa = new SqlDataAdapter();
                SqlCommand sqlcmd = new SqlCommand("sp_getMaterialsProduct", conn);
                try
                {
                    sqlcmd.CommandType = CommandType.StoredProcedure;
                    sqlcmd.Parameters.AddWithValue("@ProductId", productId);
                    SqlDa.SelectCommand = sqlcmd;

                    SqlDa.Fill(ds, "MaterialProduct");

                    gridControl2.DataSource = ds.Tables["MaterialProduct"];
                    gridControl2.ForceInitialize();

                    gridViewMaterialBom.OptionsView.ColumnAutoWidth = false;

                    gridViewMaterialBom.Columns["ID"].VisibleIndex = -1;
                    gridViewMaterialBom.Columns["ProductCode"].VisibleIndex = -1;
                    gridViewMaterialBom.Columns["Unit"].VisibleIndex = -1;

                    gridViewMaterialBom.Columns["MaterialCode"].VisibleIndex = 1;
                    gridViewMaterialBom.Columns["MaterialName"].VisibleIndex = 2;
                    gridViewMaterialBom.Columns["Quantity"].VisibleIndex = 3;

                    gridViewMaterialBom.Columns["Unit"].Width = 50;

                    gridViewMaterialBom.Columns["Quantity"].DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
                    gridViewMaterialBom.Columns["Quantity"].DisplayFormat.FormatString = "{0:n3}";                    

                    // Calculated Total column: 
                    GridColumn columnTotal = new GridColumn();
                    columnTotal.Caption = "Total";
                    columnTotal.FieldName = "Total";
                    columnTotal.OptionsColumn.AllowEdit = false;
                    columnTotal.UnboundType = DevExpress.Data.UnboundColumnType.Decimal;
                    columnTotal.UnboundExpression = weightRM + "*[Quantity]";                    

                    gridViewMaterialBom.Columns.Add(columnTotal);

                    columnTotal.VisibleIndex = gridViewMaterialBom.VisibleColumns.Count;
                    columnTotal.DisplayFormat.FormatType = DevExpress.Utils.FormatType.Numeric;
                    columnTotal.DisplayFormat.FormatString = "{0:n3}";

                    gridViewMaterialBom.OptionsBehavior.Editable = false;

                    GridColumnSummaryItem item1 = new GridColumnSummaryItem(DevExpress.Data.SummaryItemType.Sum, "Total", "{0:n3}");
                    gridViewMaterialBom.Columns["Total"].Summary.Add(item1);
                    txtTotalMaterial.Text = (item1.SummaryValue.IsNull()) ? "" : item1.SummaryValue.ToString();
                    txtTotalMaterial.Properties.Mask.MaskType = DevExpress.XtraEditors.Mask.MaskType.Numeric;
                    txtTotalMaterial.Properties.Mask.EditMask = "n3";
                    txtTotalMaterial.Properties.Mask.UseMaskAsDisplayFormat = true;
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
                ScaleApp.Common.DataOperation.disconnect();
            }
        }

        private void gridView2_MasterRowExpanded(object sender, CustomMasterRowEventArgs e)
        {
            GridView master = sender as GridView;
            GridView detail = master.GetDetailView(e.RowHandle, e.RelationIndex) as GridView;
            detail.Click += new EventHandler(detail_Click);
        }

        private void detail_Click(object sender, EventArgs e)
        {
            GridView gridView = sender as GridView;
            var value = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.FocusedColumn);            
        }

        private void loadMixRaw(int mixId)
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);
            SqlDataAdapter SqlDa = new SqlDataAdapter();
            SqlCommand sqlcmd = new SqlCommand("sp_getMixRaw", conn);

            try
            {
                sqlcmd.CommandType = CommandType.StoredProcedure;
                sqlcmd.Parameters.AddWithValue("@mixRawId", mixId);
                SqlDa.SelectCommand = sqlcmd;
                SqlDa.Fill(ds);
                
                cmbShift.SelectedItem = ds.Tables[0].Rows[0][1]; //Get ShiftID
                cmbOperator.SelectedValue = ds.Tables[0].Rows[0][2]; //Get Operator                
                //cmbMaterial.SelectedValue = ds.Tables[0].Rows[0][4]; //Get Material
                lueMaterial.EditValue = ds.Tables[0].Rows[0][4]; //Get Material
                //cmbProduct.SelectedValue = ds.Tables[0].Rows[0][3]; //Get Item
                //cmbColor.SelectedValue = ds.Tables[0].Rows[0][5]; //Get Color
                lueProduct.EditValue= ds.Tables[0].Rows[0][3]; //Get Item
                lueColor.EditValue = ds.Tables[0].Rows[0][5]; //Get Color
                cmbStep.SelectedValue = ds.Tables[0].Rows[0][6]; //Get Step
                txtWeightRM.Text = ds.Tables[0].Rows[0][8].ToString(); //Get Weight RM
                txtWeightRecycled.Text = ds.Tables[0].Rows[0][9].ToString(); //Get Weight Recycled
                txtTotal.Text = ds.Tables[0].Rows[0][10].ToString(); //Get Total
                txtMachine.Text = ds.Tables[0].Rows[0][11].ToString(); //Get Machine
                qrMixLotID.Text = ds.Tables[0].Rows[0][12].ToString(); //Get Mix Lot ID
                //cmbRecycled.SelectedValue = ds.Tables[0].Rows[0][15]; //Get Recycled Lot ID
                lueRecycled.EditValue = ds.Tables[0].Rows[0][15];
                txtMixDate.Text = ds.Tables[0].Rows[0][14].ToString(); //Get Mix Lot Date                
                txtPosted.Text = ds.Tables[0].Rows[0][16].ToString();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void Start_Timer()
        {
            timer1 = new System.Windows.Forms.Timer();
            timer1.Interval = 1000;
            timer1.Tick += new EventHandler(Timer1_Tick);
            timer1.Enabled = true;
        }

        private void Timer1_Tick(object sender, EventArgs e)
        {
            lblDateTime.Text = DateTime.Now.ToString();
        }

        private void button5_Click(object sender, EventArgs e)
        {
            //string labelType = cmbLabelType.SelectedItem.ToString();

            frmReportMixed report = new frmReportMixed();

            if (cmbLabelType.SelectedItem == null)
            {
                report.LableTypeReport = "Mixed";
            }
            else
            {
                report.LableTypeReport = cmbLabelType.SelectedItem.ToString();
            }

            if (txtMixID.Text.IsNullOrEmpty())
            {
                MessageBox.Show("Select a Mix Lot Id to print !");
            }
            else
            {
                report.MixID = int.Parse(txtMixID.Text.ToString());
                report.Show();
            }            
        }        

        private void gridView1_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (gridView1.CurrentCell.RowIndex != -1)
            {
                //do you staff.
                int rowindex = gridView1.CurrentCell.RowIndex;
                int columnindex = gridView1.CurrentCell.ColumnIndex;

                txtMixID.Text = gridView1.Rows[rowindex].Cells[0].Value.ToString();
                txtPosted.Text = gridView1.Rows[rowindex].Cells[14].Value.ToString();

                loadMixRaw(int.Parse(txtMixID.Text.ToString()));
                SetcmdPost();
            }
        }

        private void cmbColor_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cmbColor.SelectedValue != null)
            {
                generateTextQRCode();
            }
            else
            {
                qrMixLotID.Text = "framas.com";
            }
        }

        private void resetForm()
        {
            cmbShift.SelectedItem = null;            
            cmbOperator.SelectedValue = "None";
            txtMachine.Text = null;
            cmbStep.SelectedValue = "None";            
            lueProduct.EditValue = null;
            txtProductName.Text = null;
            tedColorCode.Text = null;
            tedColor.Text = null;
            gridControl2.DataSource = null;
            gridControl2.ForceInitialize();
            qrMixLotID.Text = "framas.vn";            
            lueRecycled.EditValue = null;
            txtReason.Text = null;            
            txtWeightMaterial.Text = null;
            txtWeightRe.Text = null;
            txtMixDate.Text = null;
            txtMixID.Text = null;
            bteWeightRM.Text = null;
            bteWeightRe.Text = null;
            txtTotal.Text = null;
            txtTotalMaterial.Text = null;
        }

        private void btnReset_Click(object sender, EventArgs e)
        {
            resetForm();
            spbSave.Enabled = true;
        }

        private void cmdPost_Click(object sender, EventArgs e)
        {
            
        }

        private void SetcmdPost()
        {
            if (txtPosted.Text.ToString() == "0")
            {
                spbPost.Enabled = true;
                spbSave.Enabled = true;
            }
            else
            {
                spbPost.Enabled = false;
                spbSave.Enabled = false;
            }
        }

        private void UpdatePosted()
        {
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);
            SqlCommand cmd = new SqlCommand("sp_setPosted", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            
            cmd.Parameters.AddWithValue("@mixRawId", txtMixID.Text);

            conn.Open();

            int i = cmd.ExecuteNonQuery();

            ScaleApp.Common.DataOperation.disconnect();            

            if (i != 0)
            {
                MessageBox.Show("Data posted !");
                loadGridView1();
                spbPost.Enabled = true;
                spbSave.Enabled = true;
            }
        }

        private void lueProduct_EditValueChanged(object sender, EventArgs e)
        {
            string strBomCode = "";
            //string strBomCodeF = "";
            //string strBomCodeL = "";
            string strProductCode = "";
            string strProductCodeF = "";
            //string strProductCodeL = "";

            lueColor.EditValue = null;
            if (lueProduct.EditValue.IsNull())
            {
                return;
            }
            else
            {
                txtProductName.Text = lueProduct.Text;                

                strBomCode = GetProductMaterial_S(lueProduct.EditValue.ToString());
                //strBomCodeF = (strBomCode.IsNullOrEmpty()) ? "" : strBomCode.Substring(0, strBomCode.Length - 5);
                //strBomCodeL = (strBomCode.IsNullOrEmpty()) ? "" : strBomCode.Substring(strBomCode.Length - 4, 4);

                strProductCode = lueProduct.EditValue.ToString();
                strProductCodeF = (strProductCode.IsNullOrEmpty()) ? "" : strProductCode.Substring(0, strProductCode.Length - 5);
                //strProductCodeL = (strProductCode.IsNullOrEmpty()) ? "" : strProductCode.Substring(strProductCode.Length - 4, 4);

                if ((strBomCode != "") && (strBomCode.Contains(strProductCodeF)))
                {
                    LoadGridControl2(strBomCode, bteWeightRe.Text);
                }
                else
                {
                    LoadGridControl2(strProductCode, bteWeightRe.Text);
                }

                loadColorsByProduct(lueProduct.EditValue.ToString());                
                generateTextQRCode();
            }
        }                

        private void gridView2_RowClick(object sender, RowClickEventArgs e)
        {
            try
            {
                GridView gridView = sender as GridView;
                cmbShift.SelectedItem = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["ShiftName"]);
                cmbOperator.SelectedValue = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["OperatorCode"]);
                lueProduct.EditValue = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["ProductCode"]);
                //var gridCellProductCode = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["ProductCode"]);
                tedColorCode.EditValue = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["ColorCode"]);
                cmbStep.SelectedValue = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["StepCode"]);
                txtMachine.Text = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["MachineName"]).ToString();
                qrMixLotID.Text = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["MixBacode"]).ToString();
                bteWeightRM.Text = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["WeightMaterial"]).ToString();
                bteWeightRe.Text = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["WeightRecycle"]).ToString();
                txtTotal.Text = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["TotalMaterial"]).ToString();
                lueRecycled.EditValue = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["CrushRawID"]);
                txtReason.Text = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["Reason"]).ToString();
                txtMixDate.Text = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["CreateTime"]).ToString();
                txtPosted.Text = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["Posted"]).ToString();
                txtMixID.Text = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["MixRawId"]).ToString();
                SetcmdPost();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }                        
        }

        private void spWeightMaterial_Click(object sender, EventArgs e)
        {
            txtWeightMaterial.Text = txtScaleWeight.Text;
            txtTotal.Text = GetTotalWeight();
        }

        private void spWeightCrush_Click(object sender, EventArgs e)
        {
            txtWeightRe.Text = txtScaleWeight.Text;
            txtTotal.Text = GetTotalWeight();
        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {
            LoadGridControl1();
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            string path = "D:\\ExportExcel\\Mixing.xlsx";
            gridControl1.ExportToXlsx(path);
            // Open the created XLSX file with the default application. 
            Process.Start(path);
        }                

        private void bteWeightRM_ButtonClick(object sender, ButtonPressedEventArgs e)
        {
            ButtonEdit editorWeightRM = (ButtonEdit)sender;
            EditorButton Button = e.Button;

            if (Button.Kind == ButtonPredefines.OK)
            {
                editorWeightRM.Text = txtScaleWeight.Text;
                if (lueProduct.EditValue == null)
                {
                    MessageBox.Show("Select a Product first");
                }
                else
                {
                    LoadGridControl2(lueProduct.EditValue.ToString(), editorWeightRM.Text);
                }                
                txtTotal.Text = GetTotalWeight().ToString();
            }
            else if (Button.Kind == ButtonPredefines.Delete)
            {
                editorWeightRM.Text = "";
            }            
        }        

        private void bteWeightRe_ButtonClick(object sender, ButtonPressedEventArgs e)
        {
            ButtonEdit editorWeightRe = (ButtonEdit)sender;
            EditorButton Button = e.Button;

            if (Button.Kind == ButtonPredefines.OK)
            {                
                editorWeightRe.Text = txtScaleWeight.Text;
                txtTotal.Text = GetTotalWeight().ToString();
                txtReRatio.Text = (Double.Parse(bteWeightRe.Text.ToString()) / Double.Parse(txtTotal.Text.ToString())).ToString();
                txtReRatio.Properties.Mask.MaskType = DevExpress.XtraEditors.Mask.MaskType.Numeric;
                txtReRatio.Properties.Mask.EditMask = "p";
                txtReRatio.Properties.Mask.UseMaskAsDisplayFormat = true;
            }
            else if (Button.Kind == ButtonPredefines.Delete)
            {
                editorWeightRe.Text = "";
            }
        }        

        private void spbSave_Click(object sender, EventArgs e)
        {
            if (txtMixID.Text.IsNullOrEmpty())
            {
                if (CheckValidForm() == 0)
                {
                    MessageBox.Show("Input data in (*) fields !");
                }
                else
                {
                    CreateMixRaw();
                }
            }
            else
            {
                UpdateMixRaw();
            }
        }

        private void spbPost_Click(object sender, EventArgs e)
        {
            UpdatePosted();
        }

        private void spbReset_Click(object sender, EventArgs e)
        {
            resetForm();
            spbSave.Enabled = true;
        }

        private void txtReason_ButtonClick(object sender, ButtonPressedEventArgs e)
        {
            ButtonEdit editorReason = (ButtonEdit)sender;
            EditorButton Button = e.Button;

            if (Button.Kind == ButtonPredefines.Delete)
            {
                editorReason.Text = null;
            }
        }     

        private void Timer2_Tick(object sender, EventArgs e)
        {            
            CloseSerialPort();                
            txtScaleWeight.Text = "Off";            
        }

        private void spbScale_Click(object sender, EventArgs e)
        {
            timer2.Tick += new EventHandler(Timer2_Tick);
            timer2.Enabled = true;
            ActionScale();
        }
    }
}
