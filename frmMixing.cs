using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraGrid.Views.Grid;
using ScaleApp.Common;

namespace ScaleApp
{
    public partial class frmMixing : Form
    {
        public static string labelType = "";

        public frmMixing()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource asynchronously
            sqlDataSource1.FillAsync();
        }

        private void frmMixing_Load(object sender, EventArgs e)
        {               

            //txtWeightRM.Text = "0";
            //txtWeightRecycled.Text = "0";
            txtTotal.Text = "0";

            loadComboBoxOperator();
            loadComboBoxStep();
            //loadComboBoxProduct();
            //loadComboBoxMaterial();
            LoadLookUpProduct();
            LoadLookUpColor();
            LoadLookUpMaterial();
            //loadComboBoxRecycle();
            LoadLookUpRecycled();
            //loadGridView1();
            LoadGridControl1();
            cmdPost.Enabled = false;
            Start_Timer();
        }        

        private void cmbProduct_SelectedIndexChanged(object sender, EventArgs e)
        {

            if (cmbProduct.SelectedItem.IsNull())
            {
                return;
            }
            else
            {
                loadColorsByProduct(cmbProduct.SelectedValue.ToString());
            }            
        }

        private void btnSendToMaterial_Click(object sender, EventArgs e)
        {
            //txtWeightRM.Text = txtScaleWeight.Text;
            txtWeightMaterial.Text = txtScaleWeight.Text; 
        }

        private void btnSendToRecycled_Click(object sender, EventArgs e)
        {
            //txtWeightRecycled.Text = txtScaleWeight.Text;
            txtWeightRe.Text = txtScaleWeight.Text;
        }

        private void CreateMixRaw()
        {
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);
            SqlCommand cmd = new SqlCommand("sp_createMixRaw", conn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@shiftID", cmbShift.SelectedItem);
            cmd.Parameters.AddWithValue("@operatorCode", cmbOperator.SelectedValue);
            //cmd.Parameters.AddWithValue("@productCode", cmbProduct.SelectedValue);
            cmd.Parameters.AddWithValue("@productCode", lueProduct.EditValue);
            //cmd.Parameters.AddWithValue("@materialCode", cmbMaterial.SelectedValue);
            cmd.Parameters.AddWithValue("@materialCode", lueMaterial.EditValue);
            //cmd.Parameters.AddWithValue("@colorCode", cmbColor.SelectedValue);
            cmd.Parameters.AddWithValue("@colorCode", lueColor.EditValue);
            cmd.Parameters.AddWithValue("@stepId", cmbStep.SelectedValue);
            cmd.Parameters.AddWithValue("@weightRecycle", txtWeightRe.Text);
            cmd.Parameters.AddWithValue("@weightMaterial", txtWeightMaterial.Text);
            cmd.Parameters.AddWithValue("@totalMaterial", txtTotal.Text);
            cmd.Parameters.AddWithValue("@machineID", txtMachine.Text);
            cmd.Parameters.AddWithValue("@crushRawId", cmbRecycled.Text);
            cmd.Parameters.AddWithValue("@qrCode", qrMixLotID.Text);

            conn.Open();

            int i = cmd.ExecuteNonQuery();

            ScaleApp.Common.DataOperation.disconnect();

            loadGridView1();

            if (i != 0)
            {
                MessageBox.Show(i + "Data Saved");
            }
        }

        private void UpdateMixRaw()
        {
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);
            SqlCommand cmd = new SqlCommand("sp_editMixRaw", conn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@shiftID", cmbShift.SelectedItem);
            cmd.Parameters.AddWithValue("@operatorCode", cmbOperator.SelectedValue);
            //cmd.Parameters.AddWithValue("@productCode", cmbProduct.SelectedValue);
            cmd.Parameters.AddWithValue("@productCode", lueProduct.EditValue);
            //cmd.Parameters.AddWithValue("@materialCode", cmbMaterial.SelectedValue);
            cmd.Parameters.AddWithValue("@materialCode", lueMaterial.EditValue);
            //cmd.Parameters.AddWithValue("@colorCode", cmbColor.SelectedValue);
            cmd.Parameters.AddWithValue("@colorCode", lueColor.EditValue);
            cmd.Parameters.AddWithValue("@stepId", cmbStep.SelectedValue);
            cmd.Parameters.AddWithValue("@weightRecycle", txtWeightRe.Text);
            cmd.Parameters.AddWithValue("@weightMaterial", txtWeightMaterial.Text);
            cmd.Parameters.AddWithValue("@totalMaterial", txtTotal.Text);
            cmd.Parameters.AddWithValue("@machineID", txtMachine.Text);
            cmd.Parameters.AddWithValue("@crushRawId", cmbRecycled.Text);
            cmd.Parameters.AddWithValue("@qrCode", qrMixLotID.Text);
            cmd.Parameters.AddWithValue("@mixRawId", txtMixID.Text);

            conn.Open();

            int i = cmd.ExecuteNonQuery();

            ScaleApp.Common.DataOperation.disconnect();            

            if (i != 0)
            {
                MessageBox.Show(i + "Data Saved");
                loadGridView1();
            }
        }        

        private void btnSave_Click(object sender, EventArgs e)
        {
            if (txtMixID.Text.IsNullOrEmpty())
            {
                if (CheckValidForm() == 0)
                {
                    MessageBox.Show("Do you miss Item?");                    
                }
                else
                {
                    CreateMixRaw();
                }                
            }
            else
            {
                UpdateMixRaw();
            }
        }

        private int CheckValidForm()
        {            
            if (lueColor.EditValue == null || lueMaterial.EditValue == null || txtWeightMaterial.Text == null)
            {
                return 0;
            }
            return 1;
        }

        private void cmbOperator_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void cmbOperator_Click(object sender, EventArgs e)
        {

        }

        private void loadComboBoxOperator()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getOperators", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }
                DataRow blankRow = ds.Tables[0].NewRow();
                blankRow["OperatorCode"] = "None";
                blankRow["OperatorName"] = "";
                ds.Tables[0].Rows.InsertAt(blankRow, 0);

                cmbOperator.DataSource = ds.Tables[0];
                cmbOperator.DisplayMember = "OperatorName";
                cmbOperator.ValueMember = "OperatorCode";
            } catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void loadComboBoxStep()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getSteps", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }
                DataRow blankRow = ds.Tables[0].NewRow();
                blankRow["StepCode"] = "None";
                blankRow["StepName"] = "";
                ds.Tables[0].Rows.InsertAt(blankRow, 0);

                cmbStep.DataSource = ds.Tables[0];
                cmbStep.DisplayMember = "StepName";
                cmbStep.ValueMember = "StepCode";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void loadComboBoxProduct()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getProducts", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }
                DataRow blankRow = ds.Tables[0].NewRow();
                //blankRow["ProductCode"] = "None";
                //blankRow["ProductName"] = "";
                //ds.Tables[0].Rows.InsertAt(blankRow, 0);

                cmbProduct.DataSource = ds.Tables[0];
                cmbProduct.DisplayMember = "ProductName";
                cmbProduct.ValueMember = "ProductCode";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void loadComboBoxColor()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getColors", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }

                cmbColor.DataSource = ds.Tables[0];
                cmbColor.DisplayMember = "ColorName";
                cmbColor.ValueMember = "ColorCode";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void loadComboBoxMaterial()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getMaterials", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }
                DataRow blankRow = ds.Tables[0].NewRow();
                blankRow["MaterialCode"] = "None";
                blankRow["MaterialName"] = "";
                ds.Tables[0].Rows.InsertAt(blankRow, 0);

                cmbMaterial.DataSource = ds.Tables[0];
                cmbMaterial.DisplayMember = "MaterialName";
                cmbMaterial.ValueMember = "MaterialCode";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void LoadLookUpMaterial()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getMaterials", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }                

                lueMaterial.Properties.DataSource = ds.Tables[0];
                lueMaterial.Properties.DisplayMember = "MaterialName";
                lueMaterial.Properties.ValueMember = "MaterialCode";

                lueMaterial.Properties.Columns.Add(new LookUpColumnInfo("MaterialCode", "MaterialCode", 60));
                lueMaterial.Properties.Columns.Add(new LookUpColumnInfo("MaterialName", "MaterialName", 120));
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void LoadLookUpProduct()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getProducts", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }                

                lueProduct.Properties.DataSource = ds.Tables[0];
                lueProduct.Properties.DisplayMember = "ProductName";
                lueProduct.Properties.ValueMember = "ProductCode";
                lueProduct.Properties.KeyMember = "ProductCode";

                lueProduct.Properties.Columns.Add(new LookUpColumnInfo("ProductCode", "ProductCode", 60));
                lueProduct.Properties.Columns.Add(new LookUpColumnInfo("ProductName", "ProductName", 120));
                //enable text editing 
                lueProduct.Properties.TextEditStyle = TextEditStyles.Standard;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void LoadLookUpColor()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getColorsProducts", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }
                

                lueColor .Properties.DataSource = ds.Tables[0];
                lueColor.Properties.DisplayMember = "ColorName";
                lueColor.Properties.ValueMember = "ColorCode";

                lueColor.Properties.Columns.Add(new LookUpColumnInfo("ColorCode", "ColorCode", 60));
                lueColor.Properties.Columns.Add(new LookUpColumnInfo("ColorName", "ColorName", 120));
                //lueColor.Properties.Columns.Add(new LookUpColumnInfo("ProductName", "ProductName", 120));

                //enable text editing 
                lueColor.Properties.TextEditStyle = TextEditStyles.Standard;
                lueColor.CascadingOwner = lueProduct;
                lueColor.Properties.CascadingMember = "ProductCode";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void loadComboBoxRecycle()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getCrushRaws", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }
                DataRow blankRow = ds.Tables[0].NewRow();
                blankRow["CrushRawId"] = "0";
                blankRow["RecycledID"] = "";
                ds.Tables[0].Rows.InsertAt(blankRow, 0);

                cmbRecycled.DataSource = ds.Tables[0];
                cmbRecycled.DisplayMember = "RecycledID";
                cmbRecycled.ValueMember = "CrushRawId";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void LoadLookUpRecycled()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getCrushRaws", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }

                lueRecycled.Properties.DataSource = ds.Tables[0];
                lueRecycled.Properties.DisplayMember = "RecycledID";
                lueRecycled.Properties.ValueMember = "CrushRawId";

                lueRecycled.Properties.Columns.Add(new LookUpColumnInfo("CrushRawId", "CrushRawId", 60));
                lueRecycled.Properties.Columns.Add(new LookUpColumnInfo("RecycledID", "RecycledID", 120));
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void loadColorsByProduct(string productId)
        {
            if (cmbProduct.SelectedValue.ToString() == "None")
            {
                return;
            }
            else
            {
                DataSet ds = new DataSet();
                String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
                SqlConnection conn = new SqlConnection(connStr);
                SqlDataAdapter SqlDa = new SqlDataAdapter();
                SqlCommand sqlcmd = new SqlCommand("sp_getColorsProduct", conn);
                try
                {
                    sqlcmd.CommandType = CommandType.StoredProcedure;
                    sqlcmd.Parameters.AddWithValue("@ProductId", productId);
                    SqlDa.SelectCommand = sqlcmd;

                    SqlDa.Fill(ds);

                    cmbColor.DataSource = ds.Tables[0];
                    cmbColor.DisplayMember = "ColorCode";
                    cmbColor.ValueMember = "ColorCode";
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
                ScaleApp.Common.DataOperation.disconnect();
            }
        }

        private string getTotalWeight()
        {
            Double weightRM = 0;
            Double weightRe = 0;
            Double weightTotal = 0;
                
            if (String.IsNullOrEmpty(txtWeightMaterial.Text))
            {
                weightRM = 0;
            }
            else
            {
                weightRM = double.Parse(txtWeightMaterial.Text);
            }

            if (String.IsNullOrEmpty(txtWeightRe.Text))
            {
                weightRe = 0;
            }
            else
            {
                weightRe = double.Parse(txtWeightRe.Text);
            }            
            weightTotal = weightRM + weightRe;
            return weightTotal.ToString();
        }

        private void txtWeightRM_TextChanged(object sender, EventArgs e)
        {            
            txtTotal.Text = getTotalWeight();
        }

        private void txtWeightRecycled_TextChanged(object sender, EventArgs e)
        {            
            txtTotal.Text = getTotalWeight();
        }

        private void generateTextQRCode()
        {
            String qrCodeText = "";
            String qrCodeMfunction = ScaleApp.Common.mFunction.GenerateTextQRCode("MI", DateTime.Today);
            //String ItemCode = cmbProduct.SelectedValue.ToString();
            //String ColorCode = cmbColor.SelectedValue.ToString();
            String ItemCode = lueProduct.EditValue.ToString();
            String ColorCode = lueColor.EditValue.ToString();

            qrCodeText = qrCodeMfunction + "." + ItemCode + "|" + ColorCode + "|" + lueMaterial.EditValue.ToString() + "|" + getLastMixRawId().ToString();
            qrMixLotID.Text = qrCodeText;
        }

        private int getLastMixRawId()
        {
            int lastCrushRawId;

            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);
            SqlCommand sqlcmd = new SqlCommand("sp_getLastMixIdentity", conn);

            sqlcmd.CommandType = CommandType.StoredProcedure;

            SqlParameter returnParameter = new SqlParameter("@LastIdentity", SqlDbType.Int);
            returnParameter.Direction = ParameterDirection.ReturnValue;
            sqlcmd.Parameters.Add(returnParameter);
            conn.Open();
            sqlcmd.ExecuteNonQuery();

            lastCrushRawId = (int)sqlcmd.Parameters["@LastIdentity"].Value;
            return lastCrushRawId;

            ScaleApp.Common.DataOperation.disconnect();

        }

        private void loadGridView1()
        {   
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getFullMixRaws", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }

                //Select only one row
                gridView1.MultiSelect = false;
                gridView1.AutoGenerateColumns = false;
                
                gridView1.DataSource = ds.Tables[0];
                //Change name of Columns
                gridView1.Columns["MixId"].DataPropertyName = "MixRawId";
                gridView1.Columns["MixDate"].DataPropertyName = "CreateTime";
                gridView1.Columns["MixLotID"].DataPropertyName = "MixBaCode";
                gridView1.Columns["ReLotID"].DataPropertyName = "CrushRawId";
                gridView1.Columns["Shift"].DataPropertyName = "ShiftName";
                gridView1.Columns["Operator"].DataPropertyName = "OperatorName";
                gridView1.Columns["Item"].DataPropertyName = "ProductName";
                gridView1.Columns["Material"].DataPropertyName = "MaterialName";
                gridView1.Columns["Color"].DataPropertyName = "ColorName";
                gridView1.Columns["Step"].DataPropertyName = "StepCode";
                gridView1.Columns["WRaw"].DataPropertyName = "WeightMaterial";
                gridView1.Columns["WRe"].DataPropertyName = "WeightRecycle";
                gridView1.Columns["Total"].DataPropertyName = "TotalMaterial";
                gridView1.Columns["Machine"].DataPropertyName = "MachineName";
                gridView1.Columns["Posted"].DataPropertyName = "Posted";

                gridView1.Columns["MixId"].Width = 40;
                gridView1.Columns["MixDate"].Width = 100;
                gridView1.Columns["MixLotID"].Width = 120;
                gridView1.Columns["ReLotID"].Width = 120;
                gridView1.Columns["Shift"].Width = 40;
                gridView1.Columns["Operator"].Width = 80;
                gridView1.Columns["Item"].Width = 120;
                gridView1.Columns["Material"].Width = 120;
                gridView1.Columns["Color"].Width = 120;
                gridView1.Columns["Step"].Width = 60;
                gridView1.Columns["WRaw"].Width = 80;
                gridView1.Columns["WRe"].Width = 80;
                gridView1.Columns["Total"].Width = 80;
                gridView1.Columns["Machine"].Width = 80;
                gridView1.Columns["Posted"].Width = 40;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void LoadGridControl1()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                //Binding data for 2 gridView and attach to gridControl
                SqlDataAdapter SqlDaMixRaw = new SqlDataAdapter("sp_getFullMixRaws", conn);
                SqlDataAdapter SqlDaCrush = new SqlDataAdapter("sp_getFullCrushRaws", conn);
                SqlDaMixRaw.SelectCommand.CommandType = CommandType.StoredProcedure;
                SqlDaCrush.SelectCommand.CommandType = CommandType.StoredProcedure;
                SqlDaMixRaw.Fill(ds, "MixRaw");
                SqlDaCrush.Fill(ds, "CrushRaw");

                //Set up a master-detail relationship between the DataTables 
                DataColumn keyColumn = ds.Tables["MixRaw"].Columns["MixRawId"];
                DataColumn foreignKeyColumn = ds.Tables["CrushRaw"].Columns["MixRawId"];
                ds.Relations.Add("MixCrush", keyColumn, foreignKeyColumn);

                //Binding Master table to gridControl
                gridControl1.DataSource = ds.Tables["MixRaw"];
                gridControl1.ForceInitialize();

                //Set the columns of master GridView's columns to AutoResize 
                gridView2.OptionsView.ColumnAutoWidth = false;

                //Hide unsual columns of master GridView
                gridView2.Columns["OperatorCode"].VisibleIndex = -1;
                gridView2.Columns["ProductCode"].VisibleIndex = -1;
                gridView2.Columns["MaterialCode"].VisibleIndex = -1;
                gridView2.Columns["StepName"].VisibleIndex = -1;
                gridView2.Columns["CrushRawID"].VisibleIndex = -1;

                //Reorder Columns of MasterGridView
                gridView2.Columns["CreateTime"].VisibleIndex = 1;
                gridView2.Columns["MixBacode"].VisibleIndex = 2;
                gridView2.Columns["RecycledID"].VisibleIndex = 3;
                gridView2.Columns["ShiftName"].VisibleIndex = 4;
                gridView2.Columns["OperatorName"].VisibleIndex = 5;
                gridView2.Columns["ProductName"].VisibleIndex = 6;
                gridView2.Columns["MaterialName"].VisibleIndex = 7;
                gridView2.Columns["ColorCode"].VisibleIndex = 8;
                gridView2.Columns["ColorName"].VisibleIndex = 9;
                gridView2.Columns["StepCode"].VisibleIndex = 10;
                gridView2.Columns["WeightMaterial"].VisibleIndex = 11;
                gridView2.Columns["WeightRecycle"].VisibleIndex = 12;
                gridView2.Columns["TotalMaterial"].VisibleIndex = 13;
                gridView2.Columns["MachineName"].VisibleIndex = 14;

                //Set column's width of Master GridView
                gridView2.Columns["MixRawId"].Width = 40;
                gridView2.Columns["RecycledID"].Width = 150;
                gridView2.Columns["CreateTime"].Width = 100;
                gridView2.Columns["MixBacode"].Width = 150;                
                gridView2.Columns["ShiftName"].Width = 40;
                gridView2.Columns["OperatorName"].Width = 100;
                gridView2.Columns["ProductName"].Width = 180;
                gridView2.Columns["MaterialName"].Width = 180;
                gridView2.Columns["ColorCode"].Width = 82;
                gridView2.Columns["ColorName"].Width = 170;
                gridView2.Columns["StepCode"].Width = 60;
                gridView2.Columns["WeightMaterial"].Width = 80;
                gridView2.Columns["WeightRecycle"].Width = 80;
                gridView2.Columns["TotalMaterial"].Width = 80;
                gridView2.Columns["MachineName"].Width = 80;
                gridView2.Columns["Posted"].Width = 40;

                //Bind data to GridView2 and attachment to the GridView1 as a Detail
                GridView gridView3 = new GridView(gridControl1);
                gridControl1.LevelTree.Nodes.Add("MixCrush", gridView3);

                //Set caption for detail GridView
                gridView3.ViewCaption = "Recycled Lots";

                //Generate all columns of datatable resource of detail GridView
                gridView3.PopulateColumns(ds.Tables["CrushRaw"]);

                //Hide unsual columns of detail GridView
                gridView3.Columns["OperatorCode"].VisibleIndex = -1;
                gridView3.Columns["ProductCode"].VisibleIndex = -1;
                gridView3.Columns["MaterialCode"].VisibleIndex = -1;
                gridView3.Columns["StepName"].VisibleIndex = -1;
                gridView3.Columns["MixRawId"].VisibleIndex = -1;
                gridView3.Columns["CreateBy"].VisibleIndex = -1;

                //Set column's width of detail GridView
                gridView3.Columns["CrushRawId"].Width = 40;
                gridView3.Columns["OperatorName"].Width = 100;
                gridView3.Columns["ProductName"].Width = 180;
                gridView3.Columns["MaterialName"].Width = 180;
                gridView3.Columns["ColorCode"].Width = 80;
                gridView3.Columns["ColorName"].Width = 170;
                gridView3.Columns["WeightRecycle"].Width = 80;
                gridView3.Columns["LossTypeName"].Width = 60;
                gridView3.Columns["MixBacode"].Width = 150;
                gridView3.Columns["MachineName"].Width = 80;
                gridView3.Columns["RecycledID"].Width = 150;
                gridView3.Columns["Posted"].Width = 40;

                //Set editable of two GridViews to not allows
                gridView2.MasterRowExpanded += gridView2_MasterRowExpanded;
                gridView2.OptionsBehavior.Editable = gridView3.OptionsBehavior.Editable = false;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void gridView2_MasterRowExpanded(object sender, CustomMasterRowEventArgs e)
        {
            GridView master = sender as GridView;
            GridView detail = master.GetDetailView(e.RowHandle, e.RelationIndex) as GridView;
            detail.Click += new EventHandler(detail_Click);
        }

        private void detail_Click(object sender, EventArgs e)
        {
            GridView gridView = sender as GridView;
            var value = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.FocusedColumn);            
        }

        private void loadMixRaw(int mixId)
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);
            SqlDataAdapter SqlDa = new SqlDataAdapter();
            SqlCommand sqlcmd = new SqlCommand("sp_getMixRaw", conn);

            try
            {
                sqlcmd.CommandType = CommandType.StoredProcedure;
                sqlcmd.Parameters.AddWithValue("@mixRawId", mixId);
                SqlDa.SelectCommand = sqlcmd;
                SqlDa.Fill(ds);
                
                cmbShift.SelectedItem = ds.Tables[0].Rows[0][1]; //Get ShiftID
                cmbOperator.SelectedValue = ds.Tables[0].Rows[0][2]; //Get Operator                
                //cmbMaterial.SelectedValue = ds.Tables[0].Rows[0][4]; //Get Material
                lueMaterial.EditValue = ds.Tables[0].Rows[0][4]; //Get Material
                //cmbProduct.SelectedValue = ds.Tables[0].Rows[0][3]; //Get Item
                //cmbColor.SelectedValue = ds.Tables[0].Rows[0][5]; //Get Color
                lueProduct.EditValue= ds.Tables[0].Rows[0][3]; //Get Item
                lueColor.EditValue = ds.Tables[0].Rows[0][5]; //Get Color
                cmbStep.SelectedValue = ds.Tables[0].Rows[0][6]; //Get Step
                txtWeightRM.Text = ds.Tables[0].Rows[0][8].ToString(); //Get Weight RM
                txtWeightRecycled.Text = ds.Tables[0].Rows[0][9].ToString(); //Get Weight Recycled
                txtTotal.Text = ds.Tables[0].Rows[0][10].ToString(); //Get Total
                txtMachine.Text = ds.Tables[0].Rows[0][11].ToString(); //Get Machine
                qrMixLotID.Text = ds.Tables[0].Rows[0][12].ToString(); //Get Mix Lot ID
                //cmbRecycled.SelectedValue = ds.Tables[0].Rows[0][15]; //Get Recycled Lot ID
                lueRecycled.EditValue = ds.Tables[0].Rows[0][15];
                txtMixDate.Text = ds.Tables[0].Rows[0][14].ToString(); //Get Mix Lot Date                
                txtPosted.Text = ds.Tables[0].Rows[0][16].ToString();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void Start_Timer()
        {
            timer1 = new System.Windows.Forms.Timer();
            timer1.Interval = 1000;
            timer1.Tick += new EventHandler(Timer1_Tick);
            timer1.Enabled = true;
        }

        private void Timer1_Tick(object sender, EventArgs e)
        {
            lblDateTime.Text = DateTime.Now.ToString();
        }

        private void button5_Click(object sender, EventArgs e)
        {
            //string labelType = cmbLabelType.SelectedItem.ToString();

            frmReportMixed report = new frmReportMixed();

            if (cmbLabelType.SelectedItem == null)
            {
                report.LableTypeReport = "Mixed";
            }
            else
            {
                report.LableTypeReport = cmbLabelType.SelectedItem.ToString();
            }

            if (txtMixID.Text.IsNullOrEmpty())
            {
                MessageBox.Show("Select a Mix Lot Id to print !");
            }
            else
            {
                report.MixID = int.Parse(txtMixID.Text.ToString());
                report.Show();
            }            
        }        

        private void gridView1_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (gridView1.CurrentCell.RowIndex != -1)
            {
                //do you staff.
                int rowindex = gridView1.CurrentCell.RowIndex;
                int columnindex = gridView1.CurrentCell.ColumnIndex;

                txtMixID.Text = gridView1.Rows[rowindex].Cells[0].Value.ToString();
                txtPosted.Text = gridView1.Rows[rowindex].Cells[14].Value.ToString();

                loadMixRaw(int.Parse(txtMixID.Text.ToString()));
                SetcmdPost();
            }
        }

        private void cmbColor_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (cmbColor.SelectedValue != null)
            {
                generateTextQRCode();
            }
            else
            {
                qrMixLotID.Text = "framas.com";
            }
        }

        private void resetForm()
        {
            cmbShift.SelectedItem = null;            
            cmbOperator.SelectedValue = "None";
            txtMachine.Text = null;
            cmbStep.SelectedValue = "None";
            //cmbProduct.SelectedValue = "None";
            //cmbColor.SelectedValue = "None";
            lueProduct.EditValue = null;
            lueColor.EditValue = null;
            //cmbMaterial.SelectedValue = "None";
            //cmbRecycled.SelectedValue = 0;
            lueMaterial.EditValue = null;
            lueRecycled.EditValue = null;
            //txtWeightRM.Text = null;
            //txtWeightRecycled.Text = null;
            txtWeightMaterial.Text = null;
            txtWeightRe.Text = null;
            txtMixDate.Text = null;
            txtMixID.Text = null;
        }

        private void btnReset_Click(object sender, EventArgs e)
        {
            resetForm();
            btnSave.Enabled = true;
        }

        private void cmdPost_Click(object sender, EventArgs e)
        {
            UpdatePosted();
        }

        private void SetcmdPost()
        {
            if (txtPosted.Text.ToString() == "0")
            {
                cmdPost.Enabled = true;
                btnSave.Enabled = true;
            }
            else
            {
                cmdPost.Enabled = false;
                btnSave.Enabled = false;
            }
        }

        private void UpdatePosted()
        {
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);
            SqlCommand cmd = new SqlCommand("sp_setPosted", conn);
            cmd.CommandType = CommandType.StoredProcedure;
            
            cmd.Parameters.AddWithValue("@mixRawId", txtMixID.Text);

            conn.Open();

            int i = cmd.ExecuteNonQuery();

            ScaleApp.Common.DataOperation.disconnect();            

            if (i != 0)
            {
                MessageBox.Show("Data posted !");
                loadGridView1();
                btnSave.Enabled = false;
                cmdPost.Enabled = false;
            }
        }

        private void lueProduct_EditValueChanged(object sender, EventArgs e)
        {
            lueColor.EditValue = null;
        }

        private void lueColor_EditValueChanged(object sender, EventArgs e)
        {            
        }

        private void lueMaterial_EditValueChanged(object sender, EventArgs e)
        {
            if (lueColor.EditValue != null)
            {
                generateTextQRCode();
            }
            else
            {
                qrMixLotID.Text = "framas.com";
            }
        }

        private void gridView2_RowClick(object sender, RowClickEventArgs e)
        {
            GridView gridView = sender as GridView;
            //var value1 = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["CategoryID"]);
            cmbShift.SelectedItem = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["ShiftName"]);
            cmbOperator.SelectedValue = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["OperatorCode"]);
            lueMaterial.EditValue = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["MaterialCode"]);
            lueProduct.EditValue = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["ProductCode"]);
            lueColor.EditValue = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["ColorCode"]);
            cmbStep.SelectedValue = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["StepCode"]);
            txtMachine.Text = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["MachineName"]).ToString();
            qrMixLotID.Text = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["MixBacode"]).ToString();
            //txtWeightRM.Text = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["WeightMaterial"]).ToString();
            //txtWeightRecycled.Text = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["WeightRecycle"]).ToString();
            txtWeightMaterial.Text = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["WeightMaterial"]).ToString();
            txtWeightRe.Text = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["WeightRecycle"]).ToString();
            txtTotal.Text = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["TotalMaterial"]).ToString();
            lueRecycled.EditValue = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["CrushRawID"]);
            txtMixDate.Text = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["CreateTime"]).ToString();
            txtPosted.Text = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["Posted"]).ToString();
            txtMixID.Text = gridView.GetRowCellValue(gridView.FocusedRowHandle, gridView.Columns["MixRawId"]).ToString();
            SetcmdPost();
        }

        private void txtWeightMaterial_Properties_EditValueChanged(object sender, EventArgs e)
        {
            txtTotal.Text = getTotalWeight();
        }

        private void txtWeightRe_Properties_EditValueChanged(object sender, EventArgs e)
        {
            txtTotal.Text = getTotalWeight();
        }

        private void spWeightMaterial_Click(object sender, EventArgs e)
        {
            txtWeightMaterial.Text = txtScaleWeight.Text;
        }

        private void spWeightCrush_Click(object sender, EventArgs e)
        {
            txtWeightRe.Text = txtScaleWeight.Text;
        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {
            LoadGridControl1();
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            string path = "D:\\ExportExcel\\Mixing.xlsx";
            gridControl1.ExportToXlsx(path);
            // Open the created XLSX file with the default application. 
            Process.Start(path);
        }        
    }
}
