using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using ScaleApp.Common;

namespace ScaleApp
{
    public partial class frmMixing : Form
    {
        public frmMixing()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource asynchronously
            sqlDataSource1.FillAsync();
        }

        private void frmMixing_Load(object sender, EventArgs e)
        {   

            txtWeightRM.Text = "0";
            txtWeightRecycled.Text = "0";
            txtTotal.Text = "0";

            loadComboBoxOperator();
            loadComboBoxStep();
            loadComboBoxProduct();
            loadComboBoxMaterial();
            loadComboBoxRecycle();
        }

        private void cmbProduct_SelectedIndexChanged(object sender, EventArgs e)
        {
            
            if (cmbProduct.SelectedItem.IsNull())
            {
                loadComboBoxColor();
            }
            else
            {
                loadColorsByProduct(cmbProduct.SelectedValue.ToString());                
            }
            qrMixLotID.Text = generateTextQRCode();
        }

        private void btnSendToMaterial_Click(object sender, EventArgs e)
        {
            txtWeightRM.Text = txtScaleWeight.Text;
        }

        private void btnSendToRecycled_Click(object sender, EventArgs e)
        {
            txtWeightRecycled.Text = txtScaleWeight.Text;
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);
            SqlCommand cmd = new SqlCommand("sp_createMixRaw", conn);            
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.AddWithValue("@shiftID", cmbShift.SelectedItem);
            cmd.Parameters.AddWithValue("@operatorCode", cmbOperator.SelectedValue);
            cmd.Parameters.AddWithValue("@productCode", cmbProduct.SelectedValue);
            cmd.Parameters.AddWithValue("@materialCode", cmbMaterial.SelectedValue);
            cmd.Parameters.AddWithValue("@colorCode", cmbColor.SelectedValue);
            cmd.Parameters.AddWithValue("@stepId", cmbStep.SelectedValue);
            cmd.Parameters.AddWithValue("@weightRecycle", txtWeightRecycled.Text);
            cmd.Parameters.AddWithValue("@weightMaterial", txtWeightRM.Text);
            cmd.Parameters.AddWithValue("@totalMaterial", txtTotal.Text);
            cmd.Parameters.AddWithValue("@machineID", txtMachine.Text);
            cmd.Parameters.AddWithValue("@crushRawId", cmbRecycled.Text);
            cmd.Parameters.AddWithValue("@qrCode", qrMixLotID.Text);

            conn.Open();

            int i = cmd.ExecuteNonQuery();

            ScaleApp.Common.DataOperation.disconnect();

            if (i != 0)
            {
                MessageBox.Show(i + "Data Saved");
            }

        }

        private void cmbOperator_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void cmbOperator_Click(object sender, EventArgs e)
        {

        }

        private void loadComboBoxOperator()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getOperators", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }

                cmbOperator.DataSource = ds.Tables[0];
                cmbOperator.DisplayMember = "OperatorName";
                cmbOperator.ValueMember = "OperatorCode";
            } catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void loadComboBoxStep()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getSteps", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }

                cmbStep.DataSource = ds.Tables[0];
                cmbStep.DisplayMember = "StepName";
                cmbStep.ValueMember = "StepCode";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void loadComboBoxProduct()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getProducts", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }

                cmbProduct.DataSource = ds.Tables[0];
                cmbProduct.DisplayMember = "ProductName";
                cmbProduct.ValueMember = "ProductCode";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void loadComboBoxColor()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getColors", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }

                cmbColor.DataSource = ds.Tables[0];
                cmbColor.DisplayMember = "ColorName";
                cmbColor.ValueMember = "ColorCode";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void loadComboBoxMaterial()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getMaterials", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }

                cmbMaterial.DataSource = ds.Tables[0];
                cmbMaterial.DisplayMember = "MaterialName";
                cmbMaterial.ValueMember = "MaterialCode";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void loadComboBoxRecycle()
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlConnection conn = new SqlConnection(connStr);

            try
            {
                using (SqlDataAdapter SqlDa = new SqlDataAdapter("sp_getCrushRaws", conn))
                {
                    SqlDa.SelectCommand.CommandType = CommandType.StoredProcedure;
                    SqlDa.Fill(ds);
                }

                cmbRecycled.DataSource = ds.Tables[0];
                cmbRecycled.DisplayMember = "CrushRawId";
                cmbRecycled.ValueMember = "CrushRawId";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();
        }

        private void loadColorsByProduct(string productId)
        {
            DataSet ds = new DataSet();
            String connStr = ScaleApp.Common.DataOperation.GetConnectionString();
            SqlDataAdapter SqlDa = new SqlDataAdapter();
            SqlConnection conn = new SqlConnection(connStr);
            SqlCommand sqlcmd = new SqlCommand("sp_getColorsProduct", conn);
            try
            {
                sqlcmd.CommandType = CommandType.StoredProcedure;
                sqlcmd.Parameters.AddWithValue("@ProductId", productId);
                SqlDa.SelectCommand = sqlcmd;

                SqlDa.Fill(ds);                

                cmbColor.DataSource = ds.Tables[0];
                cmbColor.DisplayMember = "ColorCode";
                cmbColor.ValueMember = "ColorCode";
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            ScaleApp.Common.DataOperation.disconnect();

        }

        private string getTotalWeight()
        {
            Double weightRM = 0;
            Double weightRe = 0;
            Double weightTotal = 0;
                
            if (String.IsNullOrEmpty(txtWeightRM.Text))
            {
                weightRM = 0;
            }
            else
            {
                weightRM = double.Parse(txtWeightRM.Text);
            }

            if (String.IsNullOrEmpty(txtWeightRecycled.Text))
            {
                weightRe = 0;
            }
            else
            {
                weightRe = double.Parse(txtWeightRecycled.Text);
            }            
            weightTotal = weightRM + weightRe;
            return weightTotal.ToString();
        }

        private void txtWeightRM_TextChanged(object sender, EventArgs e)
        {            
            txtTotal.Text = getTotalWeight();
        }

        private void txtWeightRecycled_TextChanged(object sender, EventArgs e)
        {            
            txtTotal.Text = getTotalWeight();
        }

        private string generateTextQRCode()
        {
            String qrCodeText = "";
            qrCodeText = ScaleApp.Common.mFunction.GenerateTextQRCode("MI", DateTime.Today);
            return qrCodeText;
        }

        private void gridControl1_MouseClick(object sender, MouseEventArgs e)
        {
            MessageBox.Show("You have just click");
        }
    }
}
